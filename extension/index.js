(()=>{var e={387:(e,t,i)=>{const n=i(646);function s(e,t){const i=r(e)-r(t);return{time:i,text:o(i)}}function r(e){if(NaN===parseInt(e.charAt(0))&&(e=e.slice(1)),(e=e.split(":").reverse()).length<=0||e.length>3)throw new Error("convertTimeToSeconds: Unrecognized time string!");return e.reduce(((e,t,i)=>e+t*Math.pow(60,i)*1e3),0)}function o(e){const t=e<0?"-":"";let i=0,n=0,s=Math.abs(Math.floor(e/1e3));return e=Math.abs(e%1e3/10),s>=3600&&(i=Math.floor(s/3600),s-=60*i*60,i=i<10?"0"+i:i),s>=60&&(n=Math.floor(s/60),s-=60*n,n=i&&n<10?"0"+n:n),s<10&&(s="0"+s),e<10&&(e="0"+e),`${t}${i?i+":":""}${i||n?n+":":""}${s}.${e}`}e.exports=e=>{const t=e.Replicant("livesplit"),i=new n(`${e.bundleConfig.url}:${e.bundleConfig.port}`);let r,o;async function c(){let n;try{n=await i.getAll()}catch(t){return void e.log.error(t)}const r=function(e,t){const i={};if(!e||!e.currentTime||!t.currentTime)return i.error=!0,i;if(s(t.currentTime,e.currentTime)<0)return i.error=!0,i.skipUpdate=!0,i;if(i.isComplete=t.splitIndex>0&&parseInt(t.splitIndex)>e.splitIndex&&"0.00"!==t.previousSplitTime,"0.00"===e.previousSplitTime&&e.splitIndex>0&&(i.isComplete=!1),i.isComplete){if(i.duration=s(t.previousSplitTime,e.previousSplitTime||"0"),0===i.duration.time)return i.error=!0,i.skipUpdate=!0,i;i.isGold=s(t.bestPossibleTime,e.bestPossibleTime).time<0}else parseInt(t.splitIndex)<e.splitIndex?i.isUndone=!0:i.duration=s(t.currentTime,e.previousSplitTime||"0");return i}(t.value.timer,n);r.error?r.skipUpdate||(t.value.timer=n):(t.value.timer=n,r.isComplete?e.sendMessage("split",r):r.isUndone&&e.sendMessage("undoSplit",r))}t.value.connection.status="disconnected",t.value.timer=void 0,i.timeout=30,i.on("connected",(()=>{e.log.info("Connected to ls"),t.value.connection.status="connected",r=setInterval(c,15)})),i.on("disconnected",(()=>{e.log.info("Disconnected from ls"),t.value.connection.status="disconnected",t.value.timer=void 0})),i.on("error",(t=>{e.log.error(t)})),e.listenFor("connect",(async(n,s)=>{if("connected"!==t.value.connection.status){try{await i.connect()}catch(t){return e.log.info("there was an error with the promise"),void s(new Error("Could not connect to LiveSplit. Is the LiveSplit Server running?",t))}s(null)}else s(null)})),e.listenFor("disconnect",((e,n)=>{if("disconnected"!==t.value.connection.status){try{clearInterval(r),i.disconnect()}catch(e){n(new Error("Could not disconnect from LiveSplit.",e))}n(null)}else n(null)})),o=setInterval((()=>{e.sendMessage("changeInfoDisplay")}),4e3)}},646:(e,t,i)=>{e.exports=i(149)},149:(e,t,i)=>{const n=i(808),s=i(361),{deprecate:r}=i(837),o=i(113);e.exports=class extends s{constructor(e){if(super(),"string"!=typeof e)throw new TypeError("Invalid argument type! IP:PORT expected.");if(2!==(e=e.split(":")).length)throw new Error("Failed to parse connection details! IP:PORT expected.");return this._connectionDetails={ip:e[0],port:parseInt(e[1])},this._connected=!1,this.timeout=100,this._openRequests={},this._initGameTimeOnce=!1,this.getPreviousSplitname=r(this.getPreviousSplitname,'Method "getPreviousSplitname" is deprecated! Please, use "getPreviousSplitName" (capital letter "N") instead.'),this}connect(){return this._socket=new n.Socket,new Promise(((e,t)=>{this._socket.connect(this._connectionDetails.port,this._connectionDetails.ip,(()=>{this._connected=!0,this.emit("connected"),e(this._connected)})),this._socket.on("data",(e=>{e.toString("utf-8").split("\r\n").slice(0,-1).forEach((e=>{this.emit("data",JSON.parse(e))}))})),this._socket.on("error",(e=>{this.emit("error",e),t(e)})),this._socket.on("close",(()=>{this._connected=!1,this.emit("disconnected")}))}))}disconnect(){return!!this._connected&&(this._socket.destroy(),this._connected=!1,!0)}get connected(){return this._connected}send(e,t){if(!this._connected)throw new Error("Client must be connected to the server!");if("string"!=typeof e)throw new Error("String expected!");this._checkDisallowedSymbols(e);const i=o.randomUUID(),n={command:e,data:t,nonce:i};return this._socket.write(`${JSON.stringify(n)}\r\n`),this._openRequests[i]=n,this._waitForResponse(n)}_waitForResponse(e){let t=!1;const i=new Promise((i=>{t=n=>{n.nonce===e.nonce&&(this.off("data",t),delete this._openRequests[e.nonce],i(n))},this.on("data",t)})),n=new Promise((i=>{setTimeout((()=>{this.off("data",t),delete this._openRequests[e.nonce],i(null)}),this.timeout)}));return Promise.race([i,n])}_checkDisallowedSymbols(e){if(-1!==e.indexOf("\r\n"))throw new Error("No newline symbols allowed!");return!0}startTimer(){return this.send("starttimer")}startOrSplit(){return this.send("startorsplit")}split(){return this.send("split")}unsplit(){return this.send("unsplit")}skipSplit(){return this.send("skipsplit")}pause(){return this.send("pause")}resume(){return this.send("resume")}reset(){return this.send("reset")}initGameTime(){return!this._initGameTimeOnce&&(this._initGameTimeOnce=!0,this.send("initgametime"))}setGameTime(e){return this.send("setgametime",{time:e})}setLoadingTimes(e){return this.send("setloadingtimes",{time:e})}pauseGameTime(){return this.send("pausegametime")}unpauseGameTime(){return this.send("unpausegametime")}setComparison(e){return this.send("setcomparison",{comparison:e})}getDelta(e=""){return this.send("getdelta",{comparison:e})}getLastSplitTime(){return this.send("getlastsplittime")}getComparisonSplitTime(){return this.send("getcomparisonsplittime")}getCurrentTime(){return this.send("getcurrenttime")}getFinalTime(e=""){return this.send("getfinaltime",{comparison:e})}getPredictedTime(e=""){return this.send("getpredictedtime",{comparison:e})}getBestPossibleTime(){return this.send("getbestpossibletime")}getSplitIndex(){return this.send("getsplitindex")}getCurrentSplitName(){return this.send("getcurrentsplitname")}getPreviousSplitName(){return this.send("getprevioussplitname")}getPreviousSplitname(){return this.getPreviousSplitName()}getCurrentTimerPhase(){return this.send("getcurrenttimerphase")}async getAll(){const e={};for(let t of["getCurrentTimerPhase","getDelta","getLastSplitTime","getComparisonSplitTime","getCurrentTime","getFinalTime","getPredictedTime","getBestPossibleTime","getSplitIndex","getCurrentSplitName","getPreviousSplitName"]){let i=await this[t]();Object.assign(e,i.data)}return e}}},113:e=>{"use strict";e.exports=require("crypto")},361:e=>{"use strict";e.exports=require("events")},808:e=>{"use strict";e.exports=require("net")},837:e=>{"use strict";e.exports=require("util")}},t={},i=function i(n){var s=t[n];if(void 0!==s)return s.exports;var r=t[n]={exports:{}};return e[n](r,r.exports,i),r.exports}(387);module.exports=i})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,